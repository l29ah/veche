$(() => {
  const comment_message         = $('#comment_message');
  const comment_parent          = $('#comment_parent');
  const commentForm             = $('#commentForm');
  const commentRequestUserInput = $('#commentRequestUserInput');
  const commentRequestUsers     = $('#commentRequestUsers');

  function addRequestInfo(userId, username) {
    commentRequestUsers.html((_, old) =>
      old
      + `<span class="user" data-user-id="${userId}">
          ${username}
          <input type="hidden" name="request_user" value="${userId}">
          <a  class="badge dismiss"
              onclick='comment_request_user_dimiss(${JSON.stringify(userId)})'
              >
              &times;
          </a>
        </span>`
    );
  }

  commentRequestUserInput.autocomplete({
    source: "@{WebapiCompleteUserR}",
    minLength: 1,
    select: (event, ui) => {
      const value = ui.item.value;
      event.preventDefault();
      addRequestInfo(value, ui.item.label)
      commentRequestUserInput.val(null);

      console.log(
        commentRequestUsers
        .find('.user')
        .map((_, el) => $(el).data('user-id'))
        .toArray()
      );
    },
  });

  if (#{isCommentAllowed}) {
    $('a.comment-reply').click(event => {
      event.preventDefault();
      const widget = $(event.target).closest('.comment_widget');
      commentForm.appendTo(widget);
      comment_parent.val(widget.data('comment-id'));
      comment_message.focus();
    });
    $('a.comment-request').click(event => {
      event.preventDefault();
      const widget = $(event.target).closest('.comment_widget');
      const userId = widget.data('author-id');
      const username = widget.data('author-name');
      addRequestInfo(userId, username);
      comment_message.focus();
    });
  } else {
    $('a.comment-reply').remove();
    $('a.comment-request').remove();
  }

  $('#copyaddr').click(() => {
    event.preventDefault();
    navigator.clipboard.writeText($('#addr').text());
    const popover = bootstrap.Popover.getOrCreateInstance('#copyaddr');
    popover.show();
    setTimeout(() => {popover.hide();}, 2000);
  });
});

// initialize escrow calculator
$(() => {
  const escrowAddress   = #{escrowAddressT};
  const issueId         = #{toPathPiece issueId};
  const mtlIssuer       = #{mtlIssuer};
  const get             = $("#escrowCalc_get");
  const give            = $("#escrowCalc_give");
  const stellarPayLink  = $("#escrowCalc_stellarPay");

  function format(val) { return val.toFixed(7).replace(/\.?0+$/, ''); }

  function updateLink(give_val) {
    if (isFinite(give_val)) {
      const uri =
        `web+stellar:pay?destination=${escrowAddress}&amount=${give_val}`
        + `&asset_code=EURMTL&asset_issuer=${mtlIssuer}`
        + `&memo_type=MEMO_TEXT&memo=E${issueId}`;
      stellarPayLink.removeClass('disabled');
      stellarPayLink.attr('href', uri);
    } else {
      stellarPayLink.addClass('disabled');
    }
  }

  function updateFromGive() {
    const give_val = parseFloat(give.val());
    get.val(format(give_val * 0.98));
    updateLink(give_val);
  }

  function updateFromGet() {
    const give_val = format(parseFloat(get.val()) / 0.98);
    give.val(give_val);
    updateLink(give_val);
  }

  updateFromGive();
  give.each(x => x.addEventListener("input", updateFromGive));
  get .each(x => x.addEventListener("input", updateFromGet ));
});

function comment_request_user_dimiss(user_id) {
  $(`[data-user-id="${user_id}"]`).remove();
}
